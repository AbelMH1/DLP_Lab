//                   P

(1) Program: program -> vardefinition* funcdefinition*

// TIPOS
(2) IntType: type → INT
(3) DoubleType: type → DOUBLE
(4) CharType: type → CHAR
(5) VoidType: type →
(6) ArrayType: type → type INT_CONSTANT
(7) StructType: type → field*
(8) RecordField: field → type ID
(9) FunctionType: type → type vardefinition*

// DEFINICIONES
(10) VarDefinition: vardefinition → type ID
(11) FuncDefinition: funcdefinition -> ID type vardefinition* statement*

// SENTENCIAS
(12) FunctionInvocation: statement -> expression1 expression2*
(13) Print: statement -> expression*
(14) Return: statement -> expression
(15) Input: statement -> expression
(16) While: statement1 -> expression statement2*
(17) If: statement1 -> expression statement2* statement3*
(18) Assignment: statement -> expression1 expression2

// EXPRESIONES
(19) FunctionInvocation: expression1 -> expression2 expression3*
(20) Variable: expression → ID
(21) IntLiteral: expression → INT_CONSTANT
(22) DoubleLiteral: expression → REAL_CONSTANT
(23) CharLiteral: expression → CHAR_CONSTANT
(24) Arithmetic: expression1 → expression2 (+|-|*|/|%) expression3
(25) Comparison: expression1 → expression2 (>|>=|<|<=|!=|==) expression3
(26) Logical: expression1 → expression2 (&& | ||) expression3
(27) ArrayAccess: expression1 → expression2 expression3
(28) StructAccess: expression1 → expression2 ID
(29) LogicalNot: expression1 → expression2
(30) UnaryMinus: expression1 → expression2
(31) Cast: expression1 → type expression2

//_____________________________________________________________________________
//                   A

expression.type ∈ Type
statement.returnType ∈ Type

//_____________________________________________________________________________
//                   R

(1)

// TIPOS
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)

// DEFINICIONES
(10)
(11) statement*.forEach(st -> st.returnType = type.returnType)

// SENTENCIAS
(12) expression1.type = expression2.type.parenthesis(expression3*.map(expr -> expr.type))
(13) expression*.forEach(expr -> expr.mustBeBuiltInType()) // asBuiltInType()
(14) expression.type.mustPromoteTo(statement.returnType) // promotesTo(Type)
(15) expression.type.mustBeBuiltInType() // asBuiltInType()
(16) expression.type.mustBeLogical() // asLogical()
(17) expression.type.mustBeLogical() // asLogical()
(18) expression2.type.mustPromoteTo(expression1.type) // promotesTo(Type)

// EXPRESIONES
(19) expression1.type = expression2.type.parenthesis(expression3*.map(expr -> expr.type))
(20) expression.type = expression.definition.type // El IdentificationVisitor ha pasado previamente
(21) expression.type = new IntType()
(22) expression.type = new DoubleType()
(23) expression.type = new CharType()
(24) expression1.type = expression2.type.arithmetic(expression3.type)
(25) expression1.type = expression2.type.comparison(expression3.type)
(26) expression1.type = expression2.type.logic(expression3.type)
(27) expression1.type = expression2.type.squareBrackets(expression3.type)
(28) expression1.type = expression2.type.dot(ID)
(29) expression1.type = expression2.type.logicalNot() // logic()
(30) expression1.type = expression2.type.unaryMinus() // arithmetic()
(31) expression1.type = expression2.type.canBeCastTo(type)