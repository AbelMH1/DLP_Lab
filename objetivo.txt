Generar el codigo MAPL para
- Programs
- Input statements
- Print statements
- Literals
- Variables
- Assignments
- Arithmetic, comparison and logical expressions
- VarDefinitions (global / local)
- FunDefinitions
- Casts

Clase CodeGenerator que encapsula las instrucciones a bajo nivel.
- Execute, sentencia o declaracion
- Value apliar un valor para expresiones
- Address apila una direccion para expresiones

Abstract CGVisitor, que lanza IlegalStateExceptions por defecto para todo, mostrando la clase y nombre.
AddressCGVisitor <- ExecuteCGVisitor -> ValueCGVisitor
        |_____________________________________|

ExecuteCGVisitor execute = new ExecuteCGVisitor()
ast.accept(execute)
ExecuteCGVisitor() {
    address = new AddressCGVisitor(CG)
    value = new ValueCGVisitor(CG)
    address.setValueVisitor(value);
    value.setValueVisitor(address);
}

Codegenerator(String, String)
    this.out = new PrintWriter(outputFilename


En cada instrucción:
    out.println(wqerrw  + type.suffix() // si fuera necesario)
    out.flush()


En los visitors, Añadir como comentario a cada uno de los Visit su plantilla correspondiente.


PLantilla program:
for (Definition def: definition*) {
    if (def instanceof VarDEf) {
        execute[[def]]()
    }
}
<call main>
<halt>
for (Definition def: definition*) {
    if (def instanceof FuncDef) {
        execute[[def]]()
    }
}

Plantilla Print:
value[[expression]]
<out> expression.type.sufix()

Plantilla Input:
address[[expression]]()
<in> expression.rtype.sufic
<store> expression.rtype.sufic

Plantilla Variable address:
if (scope==0)
    pusha expression.definition.offset
else
    push bp
    pushi expression.definition.offset
    addi

Plantilla Variable value:
address[[expression]]
load expression.type.suffix)=